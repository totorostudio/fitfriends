import { PrismaClient } from '@prisma/client';
import { genSalt, hash } from 'bcrypt';
import { SALT_ROUNDS } from 'src/app.const';

const DEFAULT_PASSWORD = '123456';

function getUsers() {
  return [
    /*{
      name: '–í–∞—Å–∏–ª–∏–π',
      email: 'vasya@local.mail',
      password: DEFAULT_PASSWORD,
      gender: '–º—É–∂—Å–∫–æ–π',
      role: '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      description: '–Ø - –í–∞—Å–∏–ª–∏–π, –∏ —è –±—É–¥—É –∞—Ç–ª–µ—Ç–æ–º-–∫–∞—á–∫–æ–º —á–µ—Ä–µ–∑ 2 –º–µ—Å—è—Ü–∞.',
      metro: '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è',
      background: '/public/images/vasya.jpg',
      level: '–Ω–æ–≤–∏—á–æ–∫',
      trainingType: ['–±–µ–≥', '–±–æ–∫—Å'],
      trainingTime: '10-30 –º–∏–Ω',
      isReady: true,
    },
    {
      name: '–¢–∞–Ω—è',
      email: 'tanya@local.mail',
      password: DEFAULT_PASSWORD,
      gender: '–∂–µ–Ω—Å–∫–∏–π',
      role: '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      description: '–Ø - –¢–∞–Ω—è, –∏ —è –±—É–¥—É –π–æ–≥–æ–º-–∫–æ—Å–º–æ–Ω–∞–≤—Ç–æ–º —á–µ—Ä–µ–∑ 1 –º–µ—Å—è—Ü.',
      metro: '–ó–≤—ë–∑–¥–Ω–∞—è',
      background: '/public/images/tanyas.jpg',
      level: '–Ω–æ–≤–∏—á–æ–∫',
      trainingType: ['–π–æ–≥–∞', '—Å—Ç—Ä–µ–π—á–∏–Ω–≥'],
      trainingTime: '10-30 –º–∏–Ω',
      isReady: true,
    },
    {
      name: '–°–µ–º–µ–Ω',
      email: 'semen@local.mail',
      password: DEFAULT_PASSWORD,
      gender: '–º—É–∂—Å–∫–æ–π',
      role: '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      description: '–Ø - –°–µ–º–µ–Ω, –∏ —è –±—É–¥—É –±–µ–±–∏-–π–æ–¥–æ–π —á–µ—Ä–µ–∑ 2 –º–µ—Å—è—Ü–∞.',
      metro: '–ó–≤—ë–∑–¥–Ω–∞—è',
      background: '/public/images/semen.jpg',
      level: '–Ω–æ–≤–∏—á–æ–∫',
      trainingType: ['–±–æ–∫—Å', '—Å—Ç—Ä–µ–π—á–∏–Ω–≥'],
      trainingTime: '10-30 –º–∏–Ω',
      isReady: true,
    },
    {
      name: '–ï–≤–≥–µ–Ω–∏—è',
      email: 'evgeniya@local.mail',
      password: DEFAULT_PASSWORD,
      gender: '–∂–µ–Ω—Å–∫–∏–π',
      role: '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      description: '–Ø - –ñ–µ–Ω—è, –∏ —è –±—É–¥—É –±–∞–ª–µ—Ä–∏–Ω–æ–π —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞.',
      metro: '–ó–≤—ë–∑–¥–Ω–∞—è',
      background: '/public/images/evgeniya.jpg',
      level: '–Ω–æ–≤–∏—á–æ–∫',
      trainingType: ['–±–µ–≥', '—Å—Ç—Ä–µ–π—á–∏–Ω–≥'],
      trainingTime: '10-30 –º–∏–Ω',
      isReady: true,
    },*/
    {
      name: '–ë—Ä–∞–≤—ã–π –¢—Ä–µ–Ω–µ—Ä',
      email: 'trainer@local.mail',
      password: DEFAULT_PASSWORD,
      gender: '–º—É–∂—Å–∫–æ–π',
      role: '—Ç—Ä–µ–Ω–µ—Ä',
      description: '–Ø - –¢—Ä–µ–Ω–µ—Ä, —è –°—É–ø–µ—Ä—Ç—Ä–µ–Ω–µ—Ä!',
      metro: '–ü–∏–æ–Ω–µ—Ä—Å–∫–∞—è¬ª',
      background: '/public/images/trainer.jpg',
      level: '–Ω–æ–≤–∏—á–æ–∫',
      trainingType: ['–±–æ–∫—Å', '–∫—Ä–æ—Å—Å—Ñ–∏—Ç', '–∞—ç—Ä–æ–±–∏–∫–∞'],
      trainingTime: '80-100 –º–∏–Ω',
      friends: [],
      isReady: true,
    },
  ]
}

async function setPassword(password: string) {
  const salt = await genSalt(SALT_ROUNDS);
  const passwordHash = await hash(password, salt);
  return passwordHash;
}

async function seedDb(prismaClient: PrismaClient) {
  const mockUsers = getUsers();

  for (const user of mockUsers) {
    const passwordHash = await setPassword(user.password);
    await prismaClient.user.create({
      data: {
        name: user.name,
        email: user.email,
        passwordHash: passwordHash,
        gender: user.gender,
        role: user.role,
        description: user.description,
        metro: user.metro,
        background: user.background,
        level: user.level,
        trainingType: user.trainingType,
        trainingTime: user.trainingTime,
        isReady: user.isReady,
      }
    })
  }

  console.info('ü§òÔ∏è Database was filled');
}

async function bootstrap() {
  const prismaClient = new PrismaClient();

  try {
    await seedDb(prismaClient);
    globalThis.process.exit(0);
  } catch (error: unknown) {
    console.error(error);
    globalThis.process.exit(1);
  } finally {
    await prismaClient.$disconnect();
  }
}

bootstrap();
